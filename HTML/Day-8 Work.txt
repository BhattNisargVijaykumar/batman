Day-8 (Stack, Queues, Hash tables & Dictionaries)
Stack:- Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).
-A Stack is a linear data structure that follows the LIFO (Last-In-First-Out) principle. Stack has one end, whereas the Queue has two ends (front and rear). It contains only one pointer top pointer pointing to the topmost element of the stack. Whenever an element is added in the stack, it is added on the top of the stack, and the element can be deleted only from the stack. In other words, a stack can be defined as a container in which insertion and deletion can be done from the one end known as the top of the stack.

static and dynamic:-
static done threw array and dynamic done by linked list.

#Standard Stack Operations
-The following are some common operations implemented on the stack:
    1.push(): When we insert an element in a stack then the operation is known as a push. If the stack is full then the overflow condition occurs.
    2.pop(): When we delete an element from the stack, the operation is known as a pop. If the stack is empty means that no element exists in the stack, this state is known as an underflow state.
    3.isEmpty(): It determines whether the stack is empty or not.
    4.isFull(): It determines whether the stack is full or not.'
    5.peek(): It returns the element at the given position.
    6.count(): It returns the total number of elements available in a stack.
    7.change(): It changes the element at the given position.
    8.display(): It prints all the elements available in the stack.

Applications of Stack Data Structure
    1.An "undo" mechanism in text editors
    2.Forward and backward feature in web browsers
    3.Check for balanced parentheses in an expression
    4.Expression evaluation and syntax parsing
    5.Backtracking. This is a process when you need to access the most recent data element in a series of elements. Think of a maze - how do you find a way from an entrance to an exit? Once you reach a dead end, you must backtrack. But backtrack to where? to the previous choice point. Therefore, at each choice point, you store on a stack all possible choices. Then backtracking simply means popping a next choice from the stack.
    6.We use a stack for the Iterative implementation of several recursive programs like tree traversals, DFS traversal in a graph, etc.
    7.For solving several problems in algorithms, we use a stack as the principle data structure with which they organize their information.
    8.Memory management: Any modern computer environment uses a stack as the primary memory management model for a running program.



Queues:- A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.
-Queue is the data structure that is similar to the queue in the real world. A queue is a data structure in which whatever comes first will go out first, and it follows the FIFO (First-In-First-Out) policy. Queue can also be defined as the list or collection in which the insertion is done from one end known as the rear end or the tail of the queue, whereas the deletion is done from another end known as the front end or the head of the queue.

#Types of Queue
-There are four different types of queue that are listed as follows -
    1.Simple Queue or Linear Queue
    2.Circular Queue
    3.Priority Queue
    4.Double Ended Queue (or Deque)

#Operations performed on queue
-The fundamental operations that can be performed on queue are listed as follows:-
    1.Enqueue: The Enqueue operation is used to insert the element at the rear end of the queue. It returns void.
    2.Dequeue: It performs the deletion from the front-end of the queue. It also returns the element which has been removed from the front-end. It returns an integer value.
    3.Peek: This is the third operation that returns the element, which is pointed by the front pointer in the queue but does not delete it.
    4.Queue overflow (isfull): It shows the overflow condition when the queue is completely full.
    5.Queue underflow (isempty): It shows the underflow condition when the Queue is empty, i.e., no elements are in the Queue.

#Advantages of queues:
    1.The advantages of queues are that the multiple data can be handled, and they are fast and flexibility.

#Disadvantages of queues:
    1.To include a new element in the queue, the other elements must be deleted.




Hash Table:- Hash Table is a data structure which stores data in an associative manner. In a hash table, data is stored in an array format, where each data value has its own unique index value. Access of data becomes very fast if we know the index of the desired data.
-Thus, it becomes a data structure in which insertion and search operations are very fast irrespective of the size of the data. Hash Table uses an array as a storage medium and uses hash technique to generate an index where an element is to be inserted or is to be located from.

#Basic Operations
Following are the basic primary operations of a hash table.
    1.Search − Searches an element in a hash table.
    2.Insert − inserts an element in a hash table.
    3.delete − Deletes an element from a hash table.

#Advantages
    1.The main advantage of hash tables over other data structures is speed . 
    2.The access time of an element is on average O(1), therefore lookup could be performed very fast. 
    3.Hash tables are particularly efficient when the maximum number of entries can be predicted in advance.



Data Dictionary :- A data dictionary provides a descriptive list of names, definitions, and attributes of data elements to be captured in an information system or database. It describes the definitions or the expected meaning and acceptable representation of data for use within a defined context of data elements within a data set. It also provides metadata or information about data.
-The metadata may include other attributes or characteristics such as length of data element, data type (e.g., alphanumeric, numeric, date, special symbols), data frequency (mandatory or not), allowable values or constraints, originating source system, data owner, data entry date, and when the data element is no longer collected.  The goal is to achieve consistently defined and standardized data.